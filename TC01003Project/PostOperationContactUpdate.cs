
// <copyright file="PostOperationcontactUpdate.cs" company="">
// Copyright (c) 2024 All Rights Reserved
// </copyright>
// <author></author>
// <date>6/21/2024 5:07:00 PM</date>
// <summary>Implements the PostOperationcontactUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>

using System;
using System.Collections.Generic;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;

namespace TC_01003.TC01003Project
{

    /// <summary>
    /// PostOperationcontactUpdate Plugin.
    /// Fires when the following attributes are updated:
    /// emailaddress1
    /// </summary>    
    public class PostOperationContactUpdate: PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostOperationContactUpdate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information.</param>
        public PostOperationContactUpdate(string unsecure, string secure)
            : base(typeof(PostOperationContactUpdate))
        {
            
           // TODO: Implement your custom configuration handling.
        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// </remarks>
        protected override void ExecuteCdsPlugin(ILocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException(nameof(localContext));
            }           
            // Obtain the tracing service
            ITracingService tracingService = localContext.TracingService;

            try
            { 
                // Obtain the execution context from the service provider.  
                IPluginExecutionContext context = (IPluginExecutionContext)localContext.PluginExecutionContext;

                // Obtain the organization service reference for web service calls.  
                IOrganizationService currentUserService = localContext.CurrentUserService;

                // TODO: Implement your custom Plug-in business logic.
                if (context.InputParameters.Contains("Target") &&
                    context.InputParameters["Target"] is Entity)
                {
                    Entity preImageContact = context.PreEntityImages["Image"];
                    var contactParams = context.InputParameters["Target"] as Entity;
                    Entity email = new Entity("email");
                    email["subject"] = $"New Contact {preImageContact["fullname"]} email address changed {contactParams["modifiedon"]}";
                    email["description"] = $"Old email address - {preImageContact["emailaddress1"]} \n New email address {contactParams["emailaddress1"]}";

                    Entity fromParty = new Entity("activityparty");
                    fromParty["partyid"] = new EntityReference("systemuser", context.UserId);
                    EntityCollection from = new EntityCollection(new List<Entity>() { fromParty });
                    email["from"] = from;
                    Entity toParty = new Entity("activityparty");
                    toParty["partyid"] = new EntityReference("contact", Guid.Parse(contactParams["contactid"].ToString()));
                    EntityCollection to = new EntityCollection(new List<Entity>() { toParty });
                    email["to"] = to;
                    var d = currentUserService.Create(email);
                }

            }	
            // Only throw an InvalidPluginExecutionException. Please Refer https://go.microsoft.com/fwlink/?linkid=2153829.
            catch (Exception ex)
            {
                tracingService?.Trace("An error occurred executing Plugin TC_01003.TC01003Project.PostOperationcontactUpdate : {0}", ex.ToString());
                throw new InvalidPluginExecutionException("An error occurred executing Plugin TC_01003.TC01003Project.PostOperationcontactUpdate .", ex);
            }	
        }
    }
}
